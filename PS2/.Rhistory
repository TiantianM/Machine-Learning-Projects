predictors <- predict(mod,df)
# In and out sample MSE
in_mse <- sqrt(mean((y_train-predictors)^2))
out_mse <- sqrt(mean((y_test-predictors)^2))
# Optimism Gap
gap <- (out_mse - in_mse)/sig2
return (gap)
}
pred_gap <- function (n, p, sig2){
# 1. N*P matrix of training feature X
X <- matrix(runif(n*p, min = -3,max=3),nrow = n)
# 2. Generate beta and alpha
beta <- matrix(runif(p,min = -3,max = 3),nrow = p)
alpha <- matrix(runif(n,min = -3,max = 3),nrow = n) # not sure: dimension of beta and alpha
# 3. Denoise outcome
denoise <- X %*% beta + alpha
# 4. Generate noise, add to denoise outcome
noise <- matrix(rnorm(n,mean = 0, sd=sqrt(sig2)),nrow = n)
y_train <- denoise+noise
# 5. Another noise and make y_test
noise2<- matrix(rnorm(n,mean = 0, sd=sqrt(sig2)),nrow = n)
y_test <- denoise+noise2
# 6. Put them into a dataframe and run linear regression model
df<-data.frame(cbind(X,y_train))
names(df)[length(names(df))]<-"y"
mod <- lm(y~., data=df)
# Use coefficients to generate predictions
predictors <- predict(mod,df)
# In and out sample MSE
in_mse <- sqrt(mean((y_train-predictors)^2))
out_mse <- sqrt(mean((y_test-predictors)^2))
# Optimism Gap
gap <- (out_mse - in_mse)/sig2
return (gap)
}
mat1.data = runif(8, min = -3, max = 3)
mat1 <- matrix(mat1.data,nrow=4,ncol=2,byrow=TRUE)
mat1
df = as.data.frame(mat1)
length(names(df))
#function
pred_gap_rep <- function(n,p,sig2,reps){
rep_gaps = replicate(reps,pred_gap(n, p, sig2))
avg_gaps = mean(rep_gaps)
s_gaps <- data.frame(matrix(ncol = 0, nrow = 0))
s_gaps <<- cbind(rep_gaps)
print(avg_gaps)}
#test
pred_gap_rep(4,5,0.2,20)
s_gaps
n1 = pred_gap_rep(100,10,runif(1, min = 1,max=3),25)
n2 = pred_gap_rep(200,10,runif(1, min = 1,max=3),25)
n3 = pred_gap_rep(300,10,runif(1, min = 1,max=3),25)
n4 = pred_gap_rep(400,10,runif(1, min = 1,max=3),25)
n5 = pred_gap_rep(500,10,runif(1, min = 1,max=3),25)
n6 = pred_gap_rep(750,10,runif(1, min = 1,max=3),25)
n7 = pred_gap_rep(1000,10,runif(1, min = 1,max=3),25)
n8 = pred_gap_rep(1500,10,runif(1, min = 1,max=3),25)
n9 = pred_gap_rep(2000,10,runif(1, min = 1,max=3),25)
n10 = pred_gap_rep(2500,10,runif(1, min = 1,max=3),25)
n11 = pred_gap_rep(3000,10,runif(1, min = 1,max=3),25)
n12 = pred_gap_rep(4000,10,runif(1, min = 1,max=3),25)
n13 = pred_gap_rep(5000,10,runif(1, min = 1,max=3),25)
n_avg_gap <- c(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13)
n_value <- c(100, 200, 300, 400, 500, 750, 1000, 1500, 2000, 2500, 3000, 4000, 5000)
df_n <- data.frame(n_value,n_avg_gap)
p1 <- ggplot()+
geom_point(data = df_n, aes(x=n_value, y=n_avg_gap))+
xlab("N")+
ylab("average_gap")
library(ggplot2)
n_avg_gap <- c(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13)
n_value <- c(100, 200, 300, 400, 500, 750, 1000, 1500, 2000, 2500, 3000, 4000, 5000)
df_n <- data.frame(n_value,n_avg_gap)
p1 <- ggplot()+
geom_point(data = df_n, aes(x=n_value, y=n_avg_gap))+
xlab("N")+
ylab("average_gap")
m1 = pred_gap_rep(100,5,runif(1, min = 1,max=3),25)
m2 = pred_gap_rep(200,5,runif(1, min = 1,max=3),25)
m3 = pred_gap_rep(300,5,runif(1, min = 1,max=3),25)
m4 = pred_gap_rep(400,5,runif(1, min = 1,max=3),25)
m5 = pred_gap_rep(500,5,runif(1, min = 1,max=3),25)
m6 = pred_gap_rep(750,5,runif(1, min = 1,max=3),25)
m7 = pred_gap_rep(1000,5,runif(1, min = 1,max=3),25)
m8 = pred_gap_rep(1500,5,runif(1, min = 1,max=3),25)
m9 = pred_gap_rep(2000,5,runif(1, min = 1,max=3),25)
m10 = pred_gap_rep(2500,5,runif(1, min = 1,max=3),25)
m11 = pred_gap_rep(3000,5,runif(1, min = 1,max=3),25)
m12 = pred_gap_rep(4000,5,runif(1, min = 1,max=3),25)
m13 = pred_gap_rep(5000,5,runif(1, min = 1,max=3),25)
n2_avg_gap <- c(m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13)
df_n2 <- data.frame(n_value,n2_avg_gap)
p2 <- ggplot()+
geom_point(data = df_n2, aes(x=n_value, y=n2_avg_gap))+
xlab("N")+
ylab("average_gap")
s1 = pred_gap_rep(100,50,runif(1, min = 1,max=3),25)
s2 = pred_gap_rep(200,50,runif(1, min = 1,max=3),25)
s3 = pred_gap_rep(300,50,runif(1, min = 1,max=3),25)
s4 = pred_gap_rep(400,50,runif(1, min = 1,max=3),25)
s5 = pred_gap_rep(500,50,runif(1, min = 1,max=3),25)
s6 = pred_gap_rep(750,50,runif(1, min = 1,max=3),25)
s7 = pred_gap_rep(1000,50,runif(1, min = 1,max=3),25)
s8 = pred_gap_rep(1500,50,runif(1, min = 1,max=3),25)
s9 = pred_gap_rep(2000,50,runif(1, min = 1,max=3),25)
s10 = pred_gap_rep(2500,50,runif(1, min = 1,max=3),25)
s11 = pred_gap_rep(3000,50,runif(1, min = 1,max=3),25)
s12 = pred_gap_rep(4000,50,runif(1, min = 1,max=3),25)
s13 = pred_gap_rep(5000,50,runif(1, min = 1,max=3),25)
library(cowplot)
library(ggplot2)
library(data.table)
library(dplyr)
library(cowplot)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, fig.width = 16/2, fig.height = 9/2, tidy.opts=list(width.cutoff=60), tidy=TRUE)
# function
pred_gap <- function(n,p,sig2){
#1
x <- runif(n*p, min = -3, max = 3)
mat_x <- matrix(x,nrow=n,ncol=p,byrow=TRUE)
print(mat_x)
#2
b = runif(p, min = -3, max = 3)
mat_b <- matrix(mat2.data,nrow=p,ncol=1,byrow=TRUE)
a = runif(1, min = -3, max = 3)
#3
M1 = mat1 %*% mat2
N_vector = rowSums(M1) + a
#4
simu1 <- rnorm(n,0,sig2)
y_train <- N_vector+simu1
#5
simu2 <- rnorm(n,0,sig2)
y_test <- N_vector+simu2
#6
df <- as.data.frame(mat_x)
name <- c()
for(i in 1:p){
name[i] <- i
colnames(df) <- name
model <- lm(y_train ~ , data = df)
pred_gap <- function (n, p, sig2){
# 1. N*P matrix of training feature X
X <- matrix(runif(n*p, min = -3,max=3),nrow = n)
# 2. Generate beta and alpha
beta <- matrix(runif(p,min = -3,max = 3),nrow = p)
alpha <- matrix(runif(n,min = -3,max = 3),nrow = n) # not sure: dimension of beta and alpha
# 3. Denoise outcome
denoise <- X %*% beta + alpha
# 4. Generate noise, add to denoise outcome
noise <- matrix(rnorm(n,mean = 0, sd=sqrt(sig2)),nrow = n)
y_train <- denoise+noise
# 5. Another noise and make y_test
noise2<- matrix(rnorm(n,mean = 0, sd=sqrt(sig2)),nrow = n)
y_test <- denoise+noise2
# 6. Put them into a dataframe and run linear regression model
df<-data.frame(cbind(X,y_train))
names(df)[length(names(df))]<-"y"
mod <- lm(y~., data=df)
# Use coefficients to generate predictions
predictors <- predict(mod,df)
# In and out sample MSE
in_mse <- sqrt(mean((y_train-predictors)^2))
out_mse <- sqrt(mean((y_test-predictors)^2))
# Optimism Gap
gap <- (out_mse - in_mse)/sig2
return (gap)
}
mat1.data = runif(8, min = -3, max = 3)
mat1 <- matrix(mat1.data,nrow=4,ncol=2,byrow=TRUE)
mat1
df = as.data.frame(mat1)
length(names(df))
#function
pred_gap_rep <- function(n,p,sig2,reps){
rep_gaps = replicate(reps,pred_gap(n, p, sig2))
avg_gaps = mean(rep_gaps)
s_gaps <- data.frame(matrix(ncol = 0, nrow = 0))
s_gaps <<- cbind(rep_gaps)
print(avg_gaps)}
#test
pred_gap_rep(4,5,0.2,20)
s_gaps
n1 = pred_gap_rep(100,10,runif(1, min = 1,max=3),25)
n2 = pred_gap_rep(200,10,runif(1, min = 1,max=3),25)
n3 = pred_gap_rep(300,10,runif(1, min = 1,max=3),25)
n4 = pred_gap_rep(400,10,runif(1, min = 1,max=3),25)
n5 = pred_gap_rep(500,10,runif(1, min = 1,max=3),25)
n6 = pred_gap_rep(750,10,runif(1, min = 1,max=3),25)
n7 = pred_gap_rep(1000,10,runif(1, min = 1,max=3),25)
n8 = pred_gap_rep(1500,10,runif(1, min = 1,max=3),25)
n9 = pred_gap_rep(2000,10,runif(1, min = 1,max=3),25)
n10 = pred_gap_rep(2500,10,runif(1, min = 1,max=3),25)
n11 = pred_gap_rep(3000,10,runif(1, min = 1,max=3),25)
n12 = pred_gap_rep(4000,10,runif(1, min = 1,max=3),25)
n13 = pred_gap_rep(5000,10,runif(1, min = 1,max=3),25)
n_avg_gap <- c(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13)
n_value <- c(100, 200, 300, 400, 500, 750, 1000, 1500, 2000, 2500, 3000, 4000, 5000)
df_n <- data.frame(n_value,n_avg_gap)
p1 <- ggplot()+
geom_point(data = df_n, aes(x=n_value, y=n_avg_gap))+
xlab("N")+
ylab("average_gap")
m1 = pred_gap_rep(100,5,runif(1, min = 1,max=3),25)
m2 = pred_gap_rep(200,5,runif(1, min = 1,max=3),25)
m3 = pred_gap_rep(300,5,runif(1, min = 1,max=3),25)
m4 = pred_gap_rep(400,5,runif(1, min = 1,max=3),25)
m5 = pred_gap_rep(500,5,runif(1, min = 1,max=3),25)
m6 = pred_gap_rep(750,5,runif(1, min = 1,max=3),25)
m7 = pred_gap_rep(1000,5,runif(1, min = 1,max=3),25)
m8 = pred_gap_rep(1500,5,runif(1, min = 1,max=3),25)
m9 = pred_gap_rep(2000,5,runif(1, min = 1,max=3),25)
m10 = pred_gap_rep(2500,5,runif(1, min = 1,max=3),25)
m11 = pred_gap_rep(3000,5,runif(1, min = 1,max=3),25)
m12 = pred_gap_rep(4000,5,runif(1, min = 1,max=3),25)
m13 = pred_gap_rep(5000,5,runif(1, min = 1,max=3),25)
n2_avg_gap <- c(m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13)
df_n2 <- data.frame(n_value,n2_avg_gap)
p2 <- ggplot()+
geom_point(data = df_n2, aes(x=n_value, y=n2_avg_gap))+
xlab("N")+
ylab("average_gap")
s1 = pred_gap_rep(100,50,runif(1, min = 1,max=3),25)
s2 = pred_gap_rep(200,50,runif(1, min = 1,max=3),25)
s3 = pred_gap_rep(300,50,runif(1, min = 1,max=3),25)
s4 = pred_gap_rep(400,50,runif(1, min = 1,max=3),25)
s5 = pred_gap_rep(500,50,runif(1, min = 1,max=3),25)
s6 = pred_gap_rep(750,50,runif(1, min = 1,max=3),25)
s7 = pred_gap_rep(1000,50,runif(1, min = 1,max=3),25)
s8 = pred_gap_rep(1500,50,runif(1, min = 1,max=3),25)
s9 = pred_gap_rep(2000,50,runif(1, min = 1,max=3),25)
s10 = pred_gap_rep(2500,50,runif(1, min = 1,max=3),25)
s11 = pred_gap_rep(3000,50,runif(1, min = 1,max=3),25)
s12 = pred_gap_rep(4000,50,runif(1, min = 1,max=3),25)
s13 = pred_gap_rep(5000,50,runif(1, min = 1,max=3),25)
n3_avg_gap <- c(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13)
df_n3 <- data.frame(n_value,n2_avg_gap)
p3 <- ggplot()+
geom_point(data = df_n3, aes(x=n_value, y=n3_avg_gap))+
xlab("N")+
ylab("average_gap")
library(ggplot2)
library(data.table)
library(dplyr)
library(cowplot)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, fig.width = 16/2, fig.height = 9/2, tidy.opts=list(width.cutoff=60), tidy=TRUE)
pred_gap <- function (n, p, sig2){
# 1. N*P matrix of training feature X
X <- matrix(runif(n*p, min = -3,max=3),nrow = n)
# 2. Generate beta and alpha
beta <- matrix(runif(p,min = -3,max = 3),nrow = p)
alpha <- matrix(runif(n,min = -3,max = 3),nrow = n) # not sure: dimension of beta and alpha
# 3. Denoise outcome
denoise <- X %*% beta + alpha
# 4. Generate noise, add to denoise outcome
noise <- matrix(rnorm(n,mean = 0, sd=sqrt(sig2)),nrow = n)
y_train <- denoise+noise
# 5. Another noise and make y_test
noise2<- matrix(rnorm(n,mean = 0, sd=sqrt(sig2)),nrow = n)
y_test <- denoise+noise2
# 6. Put them into a dataframe and run linear regression model
df<-data.frame(cbind(X,y_train))
names(df)[length(names(df))]<-"y"
mod <- lm(y~., data=df)
# Use coefficients to generate predictions
predictors <- predict(mod,df)
# In and out sample MSE
in_mse <- sqrt(mean((y_train-predictors)^2))
out_mse <- sqrt(mean((y_test-predictors)^2))
# Optimism Gap
gap <- (out_mse - in_mse)/sig2
return (gap)
}
pred_gap <- function (n, p, sig2){
# 1. N*P matrix of training feature X
X <- matrix(runif(n*p, min = -3,max=3),nrow = n)
# 2. Generate beta and alpha
beta <- matrix(runif(p,min = -3,max = 3),nrow = p)
alpha <- matrix(runif(n,min = -3,max = 3),nrow = n) # not sure: dimension of beta and alpha
# 3. Denoise outcome
denoise <- X %*% beta + alpha
# 4. Generate noise, add to denoise outcome
noise <- matrix(rnorm(n,mean = 0, sd=sqrt(sig2)),nrow = n)
y_train <- denoise+noise
# 5. Another noise and make y_test
noise2<- matrix(rnorm(n,mean = 0, sd=sqrt(sig2)),nrow = n)
y_test <- denoise+noise2
# 6. Put them into a dataframe and run linear regression model
df<-data.frame(cbind(X,y_train))
names(df)[length(names(df))]<-"y"
mod <- lm(y~., data=df)
# Use coefficients to generate predictions
predictors <- predict(mod,df)
# In and out sample MSE
in_mse <- sqrt(mean((y_train-predictors)^2))
out_mse <- sqrt(mean((y_test-predictors)^2))
# Optimism Gap
gap <- (out_mse - in_mse)/sig2
return (gap)
}
#function
pred_gap_rep <- function(n,p,sig2,reps){
rep_gaps = replicate(reps,pred_gap(n, p, sig2))
avg_gaps = mean(rep_gaps)
s_gaps <- data.frame(matrix(ncol = 0, nrow = 0))
s_gaps <<- cbind(rep_gaps)
return(avg_gaps)}
#test
pred_gap_rep(4,5,0.2,20)
s_gaps
pred_gap <- function (n, p, sig2){
# 1. N*P matrix of training feature X
X <- matrix(runif(n*p, min = -3,max=3),nrow = n)
# 2. Generate beta and alpha
beta <- matrix(runif(p,min = -3,max = 3),nrow = p)
alpha <- matrix(runif(n,min = -3,max = 3),nrow = n) # not sure: dimension of beta and alpha
# 3. Denoise outcome
denoise <- X %*% beta + alpha
# 4. Generate noise, add to denoise outcome
noise <- matrix(rnorm(n,mean = 0, sd=sqrt(sig2)),nrow = n)
y_train <- denoise+noise
# 5. Another noise and make y_test
noise2<- matrix(rnorm(n,mean = 0, sd=sqrt(sig2)),nrow = n)
y_test <- denoise+noise2
# 6. Put them into a dataframe and run linear regression model
df<-data.frame(cbind(X,y_train))
names(df)[length(names(df))]<-"y"
mod <- lm(y~., data=df)
# Use coefficients to generate predictions
predictors <- predict(mod,df)
# In and out sample MSE
in_mse <- sqrt(mean((y_train-predictors)^2))
out_mse <- sqrt(mean((y_test-predictors)^2))
# Optimism Gap
gap <- (out_mse - in_mse)/sig2
return (gap)
}
#function
pred_gap_rep <- function(n,p,sig2,reps){
rep_gaps = replicate(reps,pred_gap(n, p, sig2))
avg_gaps = mean(rep_gaps)
s_gaps <- data.frame(matrix(ncol = 0, nrow = 0))
s_gaps <<- cbind(rep_gaps)
return(avg_gaps)}
#test
pred_gap_rep(4,5,0.2,20)
s_gaps
n1 = pred_gap_rep(100,10,runif(1, min = 1,max=3),25)
n2 = pred_gap_rep(200,10,runif(1, min = 1,max=3),25)
n3 = pred_gap_rep(300,10,runif(1, min = 1,max=3),25)
n4 = pred_gap_rep(400,10,runif(1, min = 1,max=3),25)
n5 = pred_gap_rep(500,10,runif(1, min = 1,max=3),25)
n6 = pred_gap_rep(750,10,runif(1, min = 1,max=3),25)
n7 = pred_gap_rep(1000,10,runif(1, min = 1,max=3),25)
n8 = pred_gap_rep(1500,10,runif(1, min = 1,max=3),25)
n9 = pred_gap_rep(2000,10,runif(1, min = 1,max=3),25)
n10 = pred_gap_rep(2500,10,runif(1, min = 1,max=3),25)
n11 = pred_gap_rep(3000,10,runif(1, min = 1,max=3),25)
n12 = pred_gap_rep(4000,10,runif(1, min = 1,max=3),25)
n13 = pred_gap_rep(5000,10,runif(1, min = 1,max=3),25)
n_avg_gap <- c(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13)
n_value <- c(100, 200, 300, 400, 500, 750, 1000, 1500, 2000, 2500, 3000, 4000, 5000)
df_n <- data.frame(n_value,n_avg_gap)
p1 <- ggplot()+
geom_point(data = df_n, aes(x=n_value, y=n_avg_gap))+
xlab("N")+
ylab("average_gap")
n1 = pred_gap_rep(100,10,runif(1, min = 1,max=3),25)
n2 = pred_gap_rep(200,10,runif(1, min = 1,max=3),25)
n3 = pred_gap_rep(300,10,runif(1, min = 1,max=3),25)
n4 = pred_gap_rep(400,10,runif(1, min = 1,max=3),25)
n5 = pred_gap_rep(500,10,runif(1, min = 1,max=3),25)
n6 = pred_gap_rep(750,10,runif(1, min = 1,max=3),25)
n7 = pred_gap_rep(1000,10,runif(1, min = 1,max=3),25)
n8 = pred_gap_rep(1500,10,runif(1, min = 1,max=3),25)
n9 = pred_gap_rep(2000,10,runif(1, min = 1,max=3),25)
n10 = pred_gap_rep(2500,10,runif(1, min = 1,max=3),25)
n11 = pred_gap_rep(3000,10,runif(1, min = 1,max=3),25)
n12 = pred_gap_rep(4000,10,runif(1, min = 1,max=3),25)
n13 = pred_gap_rep(5000,10,runif(1, min = 1,max=3),25)
n_avg_gap <- c(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13)
n_value <- c(100, 200, 300, 400, 500, 750, 1000, 1500, 2000, 2500, 3000, 4000, 5000)
df_n <- data.frame(n_value,n_avg_gap)
p1 <- ggplot()+
geom_point(data = df_n, aes(x=n_value, y=n_avg_gap))+
xlab("N")+
ylab("average_gap")
m1 = pred_gap_rep(100,5,runif(1, min = 1,max=3),25)
m2 = pred_gap_rep(200,5,runif(1, min = 1,max=3),25)
m3 = pred_gap_rep(300,5,runif(1, min = 1,max=3),25)
m4 = pred_gap_rep(400,5,runif(1, min = 1,max=3),25)
m5 = pred_gap_rep(500,5,runif(1, min = 1,max=3),25)
m6 = pred_gap_rep(750,5,runif(1, min = 1,max=3),25)
m7 = pred_gap_rep(1000,5,runif(1, min = 1,max=3),25)
m8 = pred_gap_rep(1500,5,runif(1, min = 1,max=3),25)
m9 = pred_gap_rep(2000,5,runif(1, min = 1,max=3),25)
m10 = pred_gap_rep(2500,5,runif(1, min = 1,max=3),25)
m11 = pred_gap_rep(3000,5,runif(1, min = 1,max=3),25)
m12 = pred_gap_rep(4000,5,runif(1, min = 1,max=3),25)
m13 = pred_gap_rep(5000,5,runif(1, min = 1,max=3),25)
n2_avg_gap <- c(m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13)
df_n2 <- data.frame(n_value,n2_avg_gap)
p2 <- ggplot()+
geom_point(data = df_n2, aes(x=n_value, y=n2_avg_gap))+
xlab("N")+
ylab("average_gap")
s1 = pred_gap_rep(100,50,runif(1, min = 1,max=3),25)
s2 = pred_gap_rep(200,50,runif(1, min = 1,max=3),25)
s3 = pred_gap_rep(300,50,runif(1, min = 1,max=3),25)
s4 = pred_gap_rep(400,50,runif(1, min = 1,max=3),25)
s5 = pred_gap_rep(500,50,runif(1, min = 1,max=3),25)
s6 = pred_gap_rep(750,50,runif(1, min = 1,max=3),25)
s7 = pred_gap_rep(1000,50,runif(1, min = 1,max=3),25)
s8 = pred_gap_rep(1500,50,runif(1, min = 1,max=3),25)
s9 = pred_gap_rep(2000,50,runif(1, min = 1,max=3),25)
s10 = pred_gap_rep(2500,50,runif(1, min = 1,max=3),25)
s11 = pred_gap_rep(3000,50,runif(1, min = 1,max=3),25)
s12 = pred_gap_rep(4000,50,runif(1, min = 1,max=3),25)
s13 = pred_gap_rep(5000,50,runif(1, min = 1,max=3),25)
n3_avg_gap <- c(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13)
df_n3 <- data.frame(n_value,n2_avg_gap)
p3 <- ggplot()+
geom_point(data = df_n3, aes(x=n_value, y=n3_avg_gap))+
xlab("N")+
ylab("average_gap")
plot_grid(p1,p2,p3, labels = c('P = 10','P = 5','P = 50'), label_size = 12)
p_list = seq(2, 50, by = 2)
g <- data.frame()
for(p in p_list){
d = pred_gap_rep(500,p,runif(1, min = 1,max=3),25)
g = rbind(g,d)}
df_p1 <- cbind(p_list,g)
colnames(df_p1) <- c("p","gap")
pp1 <- ggplot()+
geom_point(data = df_p1, aes(x=p, y=gap))+
xlab("P")+
ylab("average_gap")
g2 <- data.frame()
for(p in p_list){
d = pred_gap_rep(100,p,runif(1, min = 1,max=3),25)
g2 = rbind(g2,d)}
df_p2 <- cbind(p_list,g2)
colnames(df_p2) <- c("p","gap")
pp2 <- ggplot()+
geom_point(data = df_p2, aes(x=p, y=gap))+
xlab("P")+
ylab("average_gap")
g3 <- data.frame()
for(p in p_list){
d = pred_gap_rep(2500,p,runif(1, min = 1,max=3),25)
g3 = rbind(g3,d)}
df_p3 <- cbind(p_list,g3)
colnames(df_p3) <- c("p","gap")
pp3 <- ggplot()+
geom_point(data = df_p3, aes(x=p, y=gap))+
xlab("P")+
ylab("average_gap")
plot_grid(pp1,pp2,pp3, labels = c('N = 500','N = 100','N = 2500'), label_size = 12)
train <- read.csv("collegeTrain2.csv")
test <- read.csv("collegeTest2.csv")
train <- read.csv("collegeTrain2.csv")
test <- read.csv("collegeTest2.csv")
View(train)
train <- read.csv("collegeTrain2.csv")
test <- read.csv("collegeTest2.csv")
train$Private<-ifelse(train$Private =="Yes",1,0)
test$Private<-ifelse(test$Private =="Yes",1,0)
head(test)
train <- read.csv("collegeTrain2.csv")
test <- read.csv("collegeTest2.csv")
train$Private<-ifelse(train$Private =="Yes",1,0)
test$Private<-ifelse(test$Private =="Yes",1,0)
head(train)
head(test)
View(train)
p1 <- ggplot(train,aes(EnrollRate,Outstate)) +
geom_point() +
stat_smooth(method = "lm",
formula = Outstate ~ EnrollRate,
se = FALSE) +
labs(title = "5th order")
library(ggplot2)
library(data.table)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, fig.width = 16/2, fig.height = 9/2, tidy.opts=list(width.cutoff=60), tidy=TRUE)
train <- read.csv("collegeTrain2.csv")
test <- read.csv("collegeTest2.csv")
train$Private<-ifelse(train$Private =="Yes",1,0) #yes:1; no:0
test$Private<-ifelse(test$Private =="Yes",1,0)
head(train)
head(test)
p1 <- ggplot(train,aes(EnrollRate,Outstate)) +
geom_point() +
stat_smooth(method = "lm",
formula = Outstate ~ EnrollRate,
se = FALSE) +
labs(title = "5th order")
p1
p1 <- ggplot(train,aes(EnrollRate,Outstate)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
se = FALSE) +
labs(title = "5th order")
p1
p1 <- ggplot(train,aes(EnrollRate,Outstate)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ x,
se = FALSE) +
labs(title = "OutState Tuition vs EnrollRate")
p1
