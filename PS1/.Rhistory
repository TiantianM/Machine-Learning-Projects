bs200 <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = 0.01), nbins200)
plot(train1$x, train1$y, pch = "+", col = "gray", cex = 0.7, xlab = "X", ylab = "Y", main = "Bins = 200")
lines(seq(-10,10,by=0.01), bs200[[2]][,2], col = "red", lwd = 3)
library(ggplot2)
par(mfrow = c(2,3))
p1 <- ggplot(train1, aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 1),
se = FALSE)
p3 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 3),
se = FALSE)
p5 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 5),
se = FALSE)
p10 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 10),
se = FALSE)
p15 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 15),
se = FALSE)
p20 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 20),
se = FALSE)
#plot_grid(p1,p3,p5,p10,p15,p20, ncol=3,nrow=2)
library(ggplot2)
par(mfrow = c(2,3))
p1 <- ggplot(train1, aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 1),
se = FALSE)
p3 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 3),
se = FALSE)
p5 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 5),
se = FALSE)
p10 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 10),
se = FALSE)
p15 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 15),
se = FALSE)
p20 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 20),
se = FALSE)
plot_grid(p1,p3,p5,p10,p15,p20, ncol=3,nrow=2)
install.packages("formatR")
library(formatR)
library(ggplot2)
library(formatR)
par(mfrow = c(2,3))
p1 <- ggplot(train1, aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 1),
se = FALSE)
p3 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 3),
se = FALSE)
p5 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 5),
se = FALSE)
p10 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 10),
se = FALSE)
p15 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 15),
se = FALSE)
p20 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 20),
se = FALSE)
plot_grid(p1,p3,p5,p10,p15,p20, ncol=3,nrow=2)
install.packages("plogr")
library(plogr)
library(plotrix)
library(ggplot2)
library(formatR)
library(cowplot)
par(mfrow = c(2,3))
p1 <- ggplot(train1, aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 1),
se = FALSE)
p3 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 3),
se = FALSE)
p5 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 5),
se = FALSE)
p10 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 10),
se = FALSE)
p15 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 15),
se = FALSE)
p20 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 20),
se = FALSE)
plot_grid(p1,p3,p5,p10,p15,p20, ncol=3,nrow=2)
library(ggplot2)
library(formatR)
library(cowplot)
par(mfrow = c(2,3))
p1 <- ggplot(train1, aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 1),
se = FALSE)
p3 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 3),
se = FALSE)
p5 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 5),
se = FALSE)
p10 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 10),
se = FALSE)
p15 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 15),
se = FALSE)
p20 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 20),
se = FALSE)
plot_grid(p1,p3,p5,p10,p15,p20, ncol=3,nrow=2)
# Load the data
train1 <- read.csv("PS1Train1.csv", header = T)
head(train1)
# Plot:
plot(train1$x, train1$y,
xlab = "x",
ylab = "y",
main = "x vs y")
train1.lm = lm(y ~ x, data = train1)
summary(train1.lm)
#MSE:
residTrain1 <- resid(train1.lm)
SSE <- sum(residTrain1^2)
MSE <- SSE/200
MSE
# Plot:
library(ggplot2)
ggplot(train1,aes(x,y)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "")
MSE <- rep(0,20)
order <- c(1:20)
for(i in 1:20){
model <- lm(y ~ poly(x, i, raw = FALSE), data = train1)
MSE[i] <- mean(model$residuals^2)
}
plot(order, MSE,
xlab = "order",
ylab = "MSE",
main = "order vs MSE")
library(ggplot2)
library(formatR)
library(cowplot)
p1 <- ggplot(train1, aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 1),
se = FALSE)
p3 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 3),
se = FALSE)
p5 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 5),
se = FALSE)
p10 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 10),
se = FALSE)
p15 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 15),
se = FALSE)
p20 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 20),
se = FALSE)
plot_grid(p1,p3,p5,p10,p15,p20, ncol=3,nrow=2)
MSE <- rep(0,20)
order <- c(1:20)
for(i in 1:20){
model <- lm(y ~ poly(x, i, raw = FALSE), data = train1)
MSE[i] <- mean(model$residuals^2)
}
plot(order, MSE,
xlab = "order",
ylab = "MSE",
main = "order vs MSE")
library(ggplot2)
library(formatR)
library(cowplot)
p1 <- ggplot(train1, aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 1),
se = FALSE)
p3 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 3),
se = FALSE)
p5 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 5),
se = FALSE)
p10 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 10),
se = FALSE)
p15 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 15),
se = FALSE)
p20 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 20),
se = FALSE)
plot_grid(p1,p3,p5,p10,p15,p20, ncol=3,nrow=2)
library(ggplot2)
library(formatR)
library(cowplot)
p1 <- ggplot(train1, aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 1),
se = FALSE) +
labs(title = "1st order")
p3 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 3),
se = FALSE) +
labs(title = "3rd order")
p5 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 5),
se = FALSE) +
labs(title = "5th order")
p10 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 10),
se = FALSE) +
labs(title = "10th order")
p15 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 15),
se = FALSE) +
labs(title = "15th order")
p20 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 20),
se = FALSE) +
labs(title = "20th order")
plot_grid(p1,p3,p5,p10,p15,p20, ncol=3,nrow=2)
binned_steps <- function (x_train, y_train, x_test, nbins){
seq1 <- seq(0,1,length = nbins+1)
quan <- quantile(x_train, probs = seq1)
quan[1] <- -Inf
quan[nbins+1] <- Inf
cut1 <- cut(x_train, breaks = quan, abels = NULL, include.lowest = TRUE,
right = TRUE, dig.lab = 3, ordered_result = FALSE)
df1 <- data.frame(x_train,cut1,y_train)
df2 <- df1 %>% group_by(cut1)%>%
mutate(predictor = mean(y_train))
matrix1 <- cbind(x_value = df2$x_train, predictor_y = df2$predictor)
cut2 <- cut(x_test, breaks = quan, abels = NULL, include.lowest = TRUE, right = TRUE,
dig.lab = 3, ordered_result = FALSE)
df3 <- data.frame(x_test,cut2)
new <- unique(left_join(df3,df2,by=c('cut2'='cut1')))%>%
select(x_test,predictor) %>% distinct()
matrix2 <- cbind(test_x = new$x_test, predictor_y = new$predictor)
return(list(matrix1,matrix2))
}
mse <- c()
for(i in 1:200){
bsteps <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = .01), nbins = i)
mse[i] <- mean((bsteps$train$y - bsteps$train$pred)^2)
}
mse <- c()
for(i in 1:200){
bsteps <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = .01), nbins = i)
mse[i] <- mean((bsteps$train$y - bsteps$train$pred)^2)
}
binned_steps <- function (x_train, y_train, x_test, nbins){
seq1 <- seq(0,1,length = nbins+1)
quan <- quantile(x_train, probs = seq1)
quan[1] <- -Inf
quan[nbins+1] <- Inf
cut1 <- cut(x_train, breaks = quan, abels = NULL, include.lowest = TRUE,
right = TRUE, dig.lab = 3, ordered_result = FALSE)
df1 <- data.frame(x_train,cut1,y_train)
df2 <- df1 %>% group_by(cut1)%>%
mutate(predictor = mean(y_train))
matrix1 <- cbind(x_value = df2$x_train, predictor_y = df2$predictor)
cut2 <- cut(x_test, breaks = quan, abels = NULL, include.lowest = TRUE, right = TRUE,
dig.lab = 3, ordered_result = FALSE)
df3 <- data.frame(x_test,cut2)
new <- unique(left_join(df3,df2,by=c('cut2'='cut1')))%>%
select(x_test,predictor) %>% distinct()
matrix2 <- cbind(test_x = new$x_test, predictor_y = new$predictor)
return(list(matrix1,matrix2))
}
mse <- c()
for(i in 1:200){
bsteps <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = .01), nbins = i)
mse[i] <- mean((bsteps$train$y - bsteps$train$pred)^2)
}
library(ggplot2)
library(data.table)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, fig.width = 16/2, fig.height = 9/2, tidy.opts=list(width.cutoff=60), tidy=TRUE)
# Load the data
train1 <- read.csv("PS1Train1.csv", header = T)
head(train1)
# Plot:
plot(train1$x, train1$y,
xlab = "x",
ylab = "y",
main = "x vs y")
train1.lm = lm(y ~ x, data = train1)
summary(train1.lm)
#MSE:
residTrain1 <- resid(train1.lm)
SSE <- sum(residTrain1^2)
MSE <- SSE/200
MSE
# Plot:
library(ggplot2)
ggplot(train1,aes(x,y)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "")
MSE <- rep(0,20)
order <- c(1:20)
for(i in 1:20){
model <- lm(y ~ poly(x, i, raw = FALSE), data = train1)
MSE[i] <- mean(model$residuals^2)
}
plot(order, MSE,
xlab = "order",
ylab = "MSE",
main = "order vs MSE")
library(ggplot2)
library(formatR)
library(cowplot)
p1 <- ggplot(train1, aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 1),
se = FALSE) +
labs(title = "1st order")
p3 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 3),
se = FALSE) +
labs(title = "3rd order")
p5 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 5),
se = FALSE) +
labs(title = "5th order")
p10 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 10),
se = FALSE) +
labs(title = "10th order")
p15 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 15),
se = FALSE) +
labs(title = "15th order")
p20 <- ggplot(train1,aes(x,y)) +
geom_point() +
stat_smooth(method = "lm",  # Add polynomial regression curve
formula = y ~ poly(x, 20),
se = FALSE) +
labs(title = "20th order")
plot_grid(p1,p3,p5,p10,p15,p20, ncol=3,nrow=2)
binned_steps <- function (x_train, y_train, x_test, nbins){
seq1 <- seq(0,1,length = nbins+1)
quan <- quantile(x_train, probs = seq1)
quan[1] <- -Inf
quan[nbins+1] <- Inf
cut1 <- cut(x_train, breaks = quan, abels = NULL, include.lowest = TRUE,
right = TRUE, dig.lab = 3, ordered_result = FALSE)
df1 <- data.frame(x_train,cut1,y_train)
df2 <- df1 %>% group_by(cut1)%>%
mutate(predictor = mean(y_train))
matrix1 <- cbind(x_value = df2$x_train, predictor_y = df2$predictor)
cut2 <- cut(x_test, breaks = quan, abels = NULL, include.lowest = TRUE, right = TRUE,
dig.lab = 3, ordered_result = FALSE)
df3 <- data.frame(x_test,cut2)
new <- unique(left_join(df3,df2,by=c('cut2'='cut1')))%>%
select(x_test,predictor) %>% distinct()
matrix2 <- cbind(test_x = new$x_test, predictor_y = new$predictor)
return(list(matrix1,matrix2))
}
mse <- c()
for(i in 1:200){
bsteps <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = .01), nbins = i)
mse[i] <- mean((bsteps$train$y - bsteps$train$pred)^2)
}
n_bins <- c(1:200)
mse <- c()
for(i in 1:200){
bsteps <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = .01), nbins = i)
mse[i] <- mean((train1$y - bsteps[[1]][,2])^2)
}
ggplot(data.frame(n_bins,mse),aes(n_bins,mse)) +
geom_point()
par(mfrow = c(2,3))
nbins2 = 2
bs2 <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = 0.01), nbins2)
plot(train1$x, train1$y, pch = "+", col = "gray", cex = 0.7, xlab = "X", ylab = "Y", main = "Bins = 2")
lines(seq(-10,10,by=0.01), bs2[[2]][,2], col = "red", lwd = 3)
nbins10 = 10
bs10 <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = 0.01), nbins10)
plot(train1$x, train1$y, pch = "+", col = "gray", cex = 0.7, xlab = "X", ylab = "Y", main = "Bins = 10")
lines(seq(-10,10,by=0.01), bs10[[2]][,2], col = "red", lwd = 3)
nbins25 = 25
bs25 <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = 0.01), nbins25)
plot(train1$x, train1$y, pch = "+", col = "gray", cex = 0.7, xlab = "X", ylab = "Y", main = "Bins = 25")
lines(seq(-10,10,by=0.01), bs25[[2]][,2], col = "red", lwd = 3)
nbins50 = 50
bs50 <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = 0.01), nbins50)
plot(train1$x, train1$y, pch = "+", col = "gray", cex = 0.7, xlab = "X", ylab = "Y", main = "Bins = 50")
lines(seq(-10,10,by=0.01), bs50[[2]][,2], col = "red", lwd = 3)
nbins100 = 100
bs100 <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = 0.01), nbins100)
plot(train1$x, train1$y, pch = "+", col = "gray", cex = 0.7, xlab = "X", ylab = "Y", main = "Bins = 100")
lines(seq(-10,10,by=0.01), bs100[[2]][,2], col = "red", lwd = 3)
nbins200 = 200
bs200 <- binned_steps(x_train = train1$x, y_train = train1$y, x_test = seq(-10,10,by = 0.01), nbins200)
plot(train1$x, train1$y, pch = "+", col = "gray", cex = 0.7, xlab = "X", ylab = "Y", main = "Bins = 200")
lines(seq(-10,10,by=0.01), bs200[[2]][,2], col = "red", lwd = 3)
