legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M",
xlab = "Number of Features", ylab = "Error", col=2)
lines(number_of_features, mse, col=3)
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M",
xlab = "Number of Features", ylab = "Error", col=2)
lines(number_of_features, mse, col=3, type="b")
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M",
xlab = "Number of Features", ylab = "Error", col=2)
par(new=TRUE)
plot(number_of_features, mse, col=3, type="b")
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
par(new=TRUE)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M",
xlab = "Number of Features", ylab = "Error", col=2)
plot(number_of_features, mse, col=3, type="b")
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M",
xlab = "Number of Features", ylab = "Error", col=2)
par(new=TRUE)
plot(number_of_features, mse, col=3, type="b")
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2)
par(new=TRUE)
plot(number_of_features, mse, col=3, type="b")
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2)
par(new=TRUE)
plot(number_of_features, mse, col=3, type="b"m ylab="Error")
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2)
par(new=TRUE)
plot(number_of_features, mse, col=3, type="b", ylab="Error")
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2)
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2,
xlab="Number of Features", ylab = "Error")
lines(number_of_features, mse)
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2,
xlab="Number of Features", ylab = "Error")
lines(number_of_features, mse, col=3)
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2,
xlab="Number of Features", ylab = "Error", xlim=(0.598:0.632))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2,
xlab="Number of Features", ylab = "Error", xlim=c(0.598,0.632))
lines(number_of_features, mse, col=3)
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2,
xlab="Number of Features", ylab = "Error", ylim=c(0.598,0.632))
lines(number_of_features, mse, col=3)
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2,
xlab="Number of Features", ylab = "Error", ylim=c(0.598,0.632))
lines(number_of_features, mse, col=3)
plot(number_of_features, mse)
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2,
xlab="Number of Features", ylab = "Error", ylim=c(0.598,0.632))
lines(number_of_features, mse, col=3)
plot(number_of_features, mse, type="b")
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
train <- read.csv("collegeTrain2.csv")
test <- read.csv("collegeTest2.csv")
train$Private<-ifelse(train$Private =="Yes",1,0) #yes:1; no:0
test$Private<-ifelse(test$Private =="Yes",1,0)
loocv_lm <- function(fit){
return(mean(((fit$residuals)/(1 - hatvalues(fit)))^2))
}
set.seed(12345)
outstate_1d <- data.frame('x' = train$EnrollRate, 'y' = train$Outstate)
loocv_poly_lm <- c()
for(i in 1:10){
lm_mod <- lm(y ~ poly(x, i, raw = TRUE), data = outstate_1d)
loocv_poly_lm[i] <- loocv_lm(lm_mod)
}
grid <- data.frame("x" = seq(min(outstate_1d$x),max(outstate_1d$x),length = 5000))
plot(train$EnrollRate, train$Outstate, xlab = "Enrollment", ylab = "Outstate Price", cex = .7, col = "gray", main = "Global Polynomial")
lines(grid$x, predict(lm(y ~ poly(x, which.min(loocv_poly_lm), raw = TRUE), data = outstate_1d), newdata = grid), col = "red", lwd = 3)
min_order <- which.min(loocv_poly_lm)
min_order
global_poly_min_epe <- min(loocv_poly_lm)
global_poly_min_epe
final <- lm(Outstate~poly(EnrollRate, min_order), train)
summary(final)
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2,
xlab="Number of Features", ylab = "Error", ylim=c(0.598,0.632))
lines(c(1,2,3,4,5,6,7,8,9,10,11,16,20,30,40,50), mse, col=3)
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2,
xlab="Number of Features", ylab = "Error", ylim=c(0.598,0.632))
lines(which(!is.na(mse)), na.omit(mse), col=3)
plot(number_of_features, mse, type="b")
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2,
xlab="Number of Features", ylab = "Error", ylim=c(0.598,0.632))
lines(which(!is.na(mse)), na.omit(mse), col=3)
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
number_of_features <- c(1:50)
plot(number_of_features, oob_error_rf, lwd = 3, main = "RF Tuning M", col=2,
xlab="Number of Features", ylab = "Error", ylim=c(0.598,0.632))
lines(which(!is.na(mse)), na.omit(mse), col=3, type = "b")
legend("topright", legend=c("OOB Error", "MSE Error"), fill=c("red","green"))
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(lubridate)
library(zoo)
df <- read.csv("data.csv")
#head(df)
summary(df)
df$Date <- seq(as.Date("1979-1-1"), as.Date("2022-12-1"), by = "month")
df$Date.1 <- seq(as.Date("1979-1-1"), as.Date("2022-12-1"), by = "month")
plot(df$Date, df$Series.1, type = "l", col=2, xalb="Year", ylab="Series")
lines(df$Date, df$Series.2, type = "l", col=3)
legend("topright", legend=c("Series.1", "Series.2"), fill=c("red","green"))
# Clear graph for 3 years
df7981 <- df[1:36, ]
plot(df7981$Date, df7981$Series.1, type = "l", col=2, xlab="Date", ylab="Series")
lines(df7981$Date, df7981$Series.2, type = "l", col=3)
legend("topright", legend=c("Series.1", "Series.2"), fill=c("red","green"))
# Each year's mean value
agg_series1 <- aggregate(df$Series.1, by=list(year(df$Date)), FUN=mean)
names(agg_series1)[1] <- "Year"
names(agg_series1)[2] <- "Series1"
agg_series1
agg_series2 <- aggregate(df$Series.2, by=list(year(df$Date)), FUN=mean)
names(agg_series2)[1] <- "Year"
names(agg_series2)[2] <- "Series2"
agg_series2
total <- cbind(agg_series1, agg_series2 )[,-3]
total
# Graph by the mean value of each year
plot(agg_series1$Series1, agg_series1$x, type = "l", col=2, xlab="Year", ylab="Series (avg per year)")
lines(agg_series2$Series2, agg_series2$x, type = "l", col=3)
legend("topright", legend=c("Series.1", "Series.2"), fill=c("red","green"))
library(ggplot2)
library(data.table)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, fig.width = 16/2, fig.height = 9/2, tidy.opts=list(width.cutoff=60), tidy=TRUE)
train <- read.csv("ArticlesTrain.csv")
train <- read.csv("ArticlesTrain.csv")
train <- read.csv("ArticlesTrain.csv")
library(ggplot2)
library(data.table)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, fig.width = 16/2, fig.height = 9/2, tidy.opts=list(width.cutoff=60), tidy=TRUE)
train <- read.csv("ArticlesTrain.csv")
test <- read.csv("ArticlesTest.csv")
valid <- read.csv("ArticlesValid.csv")
# Using OOB
library(ranger)
# Create holder for OOB errors
oob_error_rf <- c()
M <- c(10,20,30,40,50)
for (i in M) {
# Random Forest Estimate
rf_mod <- ranger(shares ~ ., data = train, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
oob_error_rf[i] <- rf_mod$prediction.error
}
library(readxl)
library(lubridate)
library(zoo)
df <- read.csv("data.csv")
#head(df)
summary(df)
df$Date <- seq(as.Date("1979-1-1"), as.Date("2022-12-1"), by = "month")
df$Date.1 <- seq(as.Date("1979-1-1"), as.Date("2022-12-1"), by = "month")
plot(df$Date, df$Series.1, type = "l", col=2, xalb="Year", ylab="Series")
lines(df$Date, df$Series.2, type = "l", col=3)
legend("topright", legend=c("Series.1", "Series.2"), fill=c("red","green"))
# Clear graph for 3 years
df7981 <- df[1:36, ]
plot(df7981$Date, df7981$Series.1, type = "l", col=2, xlab="Date", ylab="Series")
lines(df7981$Date, df7981$Series.2, type = "l", col=3)
legend("topright", legend=c("Series.1", "Series.2"), fill=c("red","green"))
# Each year's mean value
agg_series1 <- aggregate(df$Series.1, by=list(year(df$Date)), FUN=mean)
names(agg_series1)[1] <- "Year"
names(agg_series1)[2] <- "Series1"
agg_series1
agg_series2 <- aggregate(df$Series.2, by=list(year(df$Date)), FUN=mean)
names(agg_series2)[1] <- "Year"
names(agg_series2)[2] <- "Series2"
agg_series2
total <- cbind(agg_series1, agg_series2 )[,-3]
total
# Graph by the mean value of each year
plot(agg_series1$Series1, agg_series1$Year, type = "l", col=2, xlab="Year", ylab="Series (avg per year)")
lines(agg_series2$Series2, agg_series2$Year, type = "l", col=3)
legend("topright", legend=c("Series.1", "Series.2"), fill=c("red","green"))
# Graph by the mean value of each year
plot(agg_series1$Year, agg_series1$Series1, type = "l", col=2, xlab="Year", ylab="Series (avg per year)")
lines(agg_series2$Year, agg_series2$Series2, type = "l", col=3)
legend("topright", legend=c("Series.1", "Series.2"), fill=c("red","green"))
# Using OOB
library(ranger)
# Create holder for OOB errors
oob_error_rf <- c()
M <- c(10,20,30,40,50)
for (i in M) {
# Random Forest Estimate
rf_mod <- ranger(shares ~ ., data = train, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
oob_error_rf[i] <- rf_mod$prediction.error
}
M1 <- which.min(oob_error_rf)
M1
#Using OOB
M <- seq(from=1, to=20, by=5)
for (i in M) {
# Random Forest Estimate
rf_mod <- ranger(shares ~ ., data = train, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
oob_error_rf[i] <- rf_mod$prediction.error
}
#Using OOB
M <- seq(from=1, to=20, by=5)
for (i in M) {
# Random Forest Estimate
rf_mod <- ranger(shares ~ ., data = train, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
oob_error_rf[i] <- rf_mod$prediction.error
}
M2 <- which.min(oob_error_rf)
M2
data$three_year_period <- cut(data$year, breaks = seq(1979, 2022, by = 3), labels = FALSE)
library(readxl)
library(lubridate)
library(zoo)
df <- read.csv("data.csv")
#head(df)
summary(df)
df$Date <- seq(as.Date("1979-1-1"), as.Date("2022-12-1"), by = "month")
df$Date.1 <- seq(as.Date("1979-1-1"), as.Date("2022-12-1"), by = "month")
plot(df$Date, df$Series.1, type = "l", col=2, xalb="Year", ylab="Series")
lines(df$Date, df$Series.2, type = "l", col=3)
legend("topright", legend=c("Series.1", "Series.2"), fill=c("red","green"))
# Clear graph for 3 years
df7981 <- df[1:36, ]
plot(df7981$Date, df7981$Series.1, type = "l", col=2, xlab="Date", ylab="Series")
lines(df7981$Date, df7981$Series.2, type = "l", col=3)
legend("topright", legend=c("Series.1", "Series.2"), fill=c("red","green"))
# Each year's mean value
agg_series1 <- aggregate(df$Series.1, by=list(year(df$Date)), FUN=mean)
names(agg_series1)[1] <- "Year"
names(agg_series1)[2] <- "Series1"
agg_series1
agg_series2 <- aggregate(df$Series.2, by=list(year(df$Date)), FUN=mean)
names(agg_series2)[1] <- "Year"
names(agg_series2)[2] <- "Series2"
agg_series2
total <- cbind(agg_series1, agg_series2 )[,-3]
total
df$three_year_period <- cut(df$, breaks = seq(1979, 2022, by = 3), labels = FALSE)
df$three_year_period <- cut(df$Date, breaks = seq(1979, 2022, by = 3), labels = FALSE)
df$three_year_period <- cut(df$Date, breaks = 3, labels = FALSE)
total$three_year_period <- cut(total$Year, breaks = 3, labels = FALSE)
S1_three_agg <- aggregate(Series1 ~ three_year_period, total, mean)
total$three_year_period <- cut(total$Year, breaks = 3, labels = FALSE)
S1_three_agg <- aggregate(Series1 ~ three_year_period, total, mean)
S1_three_agg
total$three_year_period <- cut(total$Year, breaks = 14, labels = FALSE)
S1_three_agg <- aggregate(Series1 ~ three_year_period, total, mean)
S1_three_agg
View(S1_three_agg)
total <- total[-1,]
total$three_year_period <- cut(total$Year, breaks = 14, labels = FALSE)
S1_three_agg <- aggregate(Series1 ~ three_year_period, total, mean)
S1_three_agg
View(total)
total <- total[-1,]
total$three_year_period <- cut(total$Year, breaks = 14, labels = FALSE)
S1_three_agg <- aggregate(Series1 ~ three_year_period, total, mean)
S1_three_agg
S2_three_agg <- aggregate(Series2 ~ three_year_period, total, mean)
S2_three_agg
total <- total[-1,]
total$three_year_period <- cut(total$Year, breaks = 14, labels = FALSE)
S1_three_agg <- aggregate(Series1 ~ three_year_period, total, mean)
S1_three_agg
S2_three_agg <- aggregate(Series2 ~ three_year_period, total, mean)
S2_three_agg
total_three_year <- cbind(agg_series1, agg_series2 )
total_three_year
total <- total[-1,]
total$three_year_period <- cut(total$Year, breaks = 14, labels = FALSE)
S1_three_agg <- aggregate(Series1 ~ three_year_period, total, mean)
S1_three_agg
S2_three_agg <- aggregate(Series2 ~ three_year_period, total, mean)
S2_three_agg
total_three_year <- cbind(agg_series1, agg_series2 )[,-3]
total_three_year
total <- total[-1,]
total$three_year_period <- cut(total$Year, breaks = 14, labels = FALSE)
S1_three_agg <- aggregate(Series1 ~ three_year_period, total, mean)
S1_three_agg
S2_three_agg <- aggregate(Series2 ~ three_year_period, total, mean)
S2_three_agg
total_three_year <- cbind(agg_series1, agg_series2 )[,-3]
total_three_year
total <- total[-1,]
total$three_year_period <- cut(total$Year, breaks = 14, labels = FALSE)
S1_three_agg <- aggregate(Series1 ~ three_year_period, total, mean)
S1_three_agg
S2_three_agg <- aggregate(Series2 ~ three_year_period, total, mean)
S2_three_agg
total_three_year <- cbind(S1_three_agg, S2_three_agg )[,-3]
total_three_year
# Using OOB
M <- seq(from= 6, to= 16, by=1)
for (i in M) {
# Random Forest Estimate
rf_mod <- ranger(shares ~ ., data = train, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
oob_error_rf[i] <- rf_mod$prediction.error
}
# Using OOB
M <- seq(from= 6, to= 16, by=1)
for (i in M) {
# Random Forest Estimate
rf_mod <- ranger(shares ~ ., data = train, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
oob_error_rf[i] <- rf_mod$prediction.error
}
plot(total_three_year$three_year_period, total_three_year$Series1,
type = "l", col=2, xlab="3-Year Period", ylab="Series (avg per 3-year period)")
lines(total_three_year$three_year_period, total_three_year$Series2, type = "l", col=3)
legend("topright", legend=c("Series.1", "Series.2"), fill=c("red","green"))
# Using OOB
M <- seq(from= 6, to= 16, by=1)
for (i in M) {
# Random Forest Estimate
rf_mod <- ranger(shares ~ ., data = train, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
oob_error_rf[i] <- rf_mod$prediction.error
}
M_min <- which.min(oob_error_rf)
M_min
oob_error_rf
# Using MSE
mse <- c()
MS <- c(10,20,30,40,50)
for (i in MS) {
# Random Forest Estimate
rf_mod_s <- ranger(shares ~ ., data = valid, num.trees = 1000,
mtry = i, importance = "permutation")
# Store MSE error
mse[i] <- mean((rf_mod_s$predictions-valid$shares)^2)
}
# Using MSE
mse <- c()
MS <- c(10,20,30,40,50)
for (i in MS) {
# Random Forest Estimate
rf_mod_s <- ranger(shares ~ ., data = valid, num.trees = 1000,
mtry = i, importance = "permutation")
# Store MSE error
mse[i] <- mean((rf_mod_s$predictions-valid$shares)^2)
}
M1S <- which.min(mse)
M1S
# Using MSE
MS <- seq(from=1, to=20, by=5)
for (i in MS) {
# Random Forest Estimate
rf_mod_s <- ranger(shares ~ ., data = valid, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
mse[i] <- mean((rf_mod_s$predictions-valid$shares)^2)
}
M2S <- which.min(mse)
M2S
# Using MSE
MS <- seq(from= 1, to= 11, by=1)
for (i in MS) {
# Random Forest Estimate
rf_mod_s <- ranger(shares ~ ., data = valid, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
mse[i] <- mean((rf_mod_s$predictions-valid$shares)^2)
}
# Using MSE
MS <- seq(from= 1, to= 11, by=1)
for (i in MS) {
# Random Forest Estimate
rf_mod_s <- ranger(shares ~ ., data = valid, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
mse[i] <- mean((rf_mod_s$predictions-valid$shares)^2)
}
M_min_s <- which.min(mse)
M_min_s
# Using OOB
library(ranger)
# Create holder for OOB errors
oob_error_rf <- c()
M <- c(10,20,30,40,50)
for (i in M) {
# Random Forest Estimate
rf_mod <- ranger(shares ~ ., data = train, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
oob_error_rf[i] <- rf_mod$prediction.error
}
M1 <- which.min(oob_error_rf)
M1
#Using OOB
M <- seq(from=1, to=20, by=5)
for (i in M) {
# Random Forest Estimate
rf_mod <- ranger(shares ~ ., data = train, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
oob_error_rf[i] <- rf_mod$prediction.error
}
M2 <- which.min(oob_error_rf)
M2
# Using OOB
M <- seq(from= 6, to= 16, by=1)
for (i in M) {
# Random Forest Estimate
rf_mod <- ranger(shares ~ ., data = train, num.trees = 1000,
mtry = i, importance = "permutation")
# Store OOB error
oob_error_rf[i] <- rf_mod$prediction.error
}
M_min <- which.min(oob_error_rf)
M_min
oob_error_rf
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(lubridate)
library(zoo)
df <- read_excel("/Users/elleny/Desktop/capstone11/pair56.xlsx")
df <- read_excel("pair56.xlsx")
summary(df)
class(df$Date)
df$Date <- seq(as.Date("1988-1-31"), as.Date("2023-1-31"), by = "month")
summary(df)
plot(df$Date, df$Series.5, type = "l", col=2, xlab="Year", ylab="Series")
lines(df$Date, df$Series.6, type = "l", col=3)
legend("topright", legend=c("Series.5", "Series.6"), fill=c("red","green"))
# Each year's mean value
agg_series5 <- aggregate(df$Series.5, by=list(year(df$Date)), FUN=mean)
names(agg_series5)[1] <- "Year"
names(agg_series5)[2] <- "Series5"
agg_series5
agg_series6 <- aggregate(df$Series.6, by=list(year(df$Date)), FUN=mean)
names(agg_series6)[1] <- "Year"
names(agg_series6)[2] <- "Series6"
agg_series6
total <- cbind(agg_series5, agg_series6)[,-3]
total
# Graph by the mean value of each year
plot(agg_series5$Year, agg_series5$Series5, type = "l", col=2, xlab="Year", ylab="Series (avg per year)")
lines(agg_series6$Year, agg_series6$Series6, type = "l", col=3)
legend("topright", legend=c("Series.5", "Series.6"), fill=c("red", "green"))
#calculate the average value in each 3-year period
total$three_year_period <- cut(total$Year, breaks = 15, labels = FALSE)
S5_three_agg <- aggregate(Series5 ~ three_year_period, total, mean)
S5_three_agg
S6_three_agg <- aggregate(Series6 ~ three_year_period, total, mean)
S6_three_agg
total_three_year <- cbind(S5_three_agg, S6_three_agg )[,-3]
total_three_year
plot(total_three_year$three_year_period, total_three_year$Series5,
type = "l", col=2, xlab="3-Year Period", ylab="Series (avg per 3-year period)")
lines(total_three_year$three_year_period, total_three_year$Series6, type = "l", col=3)
legend("topright", legend=c("Series.5", "Series.6"), fill=c("red","green"))
# calculate the average value in each 5-year period
total$five_year_period <- cut(total$Year, breaks = 9, labels = FALSE)
S5_five_agg <- aggregate(Series5 ~ five_year_period, total, mean)
S5_five_agg
S6_five_agg <- aggregate(Series6 ~ five_year_period, total, mean)
S6_five_agg
total_five_year <- cbind(S5_five_agg, S6_five_agg )[,-3]
total_five_year
plot(total_five_year$five_year_period, total_five_year$Series5,
type = "l", col=2, xlab="5-Year Period", ylab="Series (avg per 5-year period)")
lines(total_five_year$five_year_period, total_five_year$Series6, type = "l", col=3)
legend("topright", legend=c("Series.5", "Series.6"), fill=c("red","green"))
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(lubridate)
library(zoo)
